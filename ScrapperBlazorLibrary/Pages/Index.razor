@page "/"

<PageTitle>Index</PageTitle>

@using Scrapper.Services
@using Scrapper.Models
@using System.Collections.Concurrent
@using System.Timers
@using System.Text.RegularExpressions
@using Microsoft.Extensions.DependencyInjection
@using Moq
@inject IWatcherService WatcherService


<div class="container">
    <div class="row align-items-start">
        <div class="col">
            <h1 class="text-center" style="height:80px">Livestreams</h1>
        </div>
    </div>
    <div class="row align-items-start" style="height:60px">        
        <div class="col-md-6">
            <div class="input-group">
                <input type="text" style="min-width: 120px;" class="form-control" placeholder="Stream" @bind=ChannelAdd>
                <select class="custom-select" style="min-width: 120px;" @bind="WebsiteAdd">
                    <option selected value="">Choose...</option>
                    @foreach (var name in Enum.GetNames(typeof(EnvironmentModel.Websites)))
                    {
                        <option value="@name.ToLower()">@name</option>
                    }
                </select>
                <div class="input-group-append">
                    <button type="button" class="btn btn-primary" @onclick="AddStream" disabled="@DisableAllButtons">
                        Add
                    </button>
                </div>
            </div>
        </div>
        <div class="col-md-6 ms-auto">
            <button type="button" class="btn btn-primary float-end ms-3" @onclick="StartAllStreams" disabled="@DisableAllButtons">
                Start All
            </button>
            <button type="button" class="btn btn-danger float-end ms-3" @onclick="StopAllStreams" disabled="@DisableAllButtons">
                Stop All
            </button>
        </div>
    </div>
    <div class="row align-items-start">
        @if (streams == null)
        {
            <p><em>Loading...</em></p>
        }
        else
        {
            <table class="table table-striped table-hover table-sm align-middle">
                <thead>
                    <tr>
                        @*<th></th>*@
                        <th>Website</th>
                        <th>Channel</th>
                        <th>Status</th>
                        <th>Current Game</th>
                        <th>Viewers</th>
                        <th></th>
                    </tr>
                </thead>
                <tbody>
                    @foreach (var stream in streams)
                    {
                        <tr>
                            @*<td><input type="checkbox" name="brand"></td>*@
                            <td>@Regex.Replace(stream.Website, "^[a-z]", m => m.Value.ToUpper())</td>
                            <td>@stream.Channel</td>
                            @if (stream.Status == EnumsModel.ScrapperStatus.Waiting)
                            {
                                if (stream.WaitTimer.TimeLeft <= 0 || stream.WaitTimer.ElapsedOnce)
                                {
                                    <td>Starting...</td>
                                }
                                else
                                {
                                    <td>@stream.Status (@TimeSpan.FromMilliseconds(stream.WaitTimer.TimeLeft).ToString(@"hh\:mm\:ss"))</td>
                                }
                                <td></td>
                                <td></td>
                            }
                            else if(stream.Status == EnumsModel.ScrapperStatus.Running)
                            {
                                <td>@stream.Status</td>
                                <td>@stream.Scrapper.CurrentGame</td>
                                <td>@stream.Scrapper.ViewersCount</td>
                            }
                            else
                            {
                                <td>@stream.Status</td>
                                <td></td>
                                <td></td>
                            }
                            <td>
                                <div class="d-flex flex-row-reverse">
                                    <button type="button" class="btn btn-secondary ms-3" @onclick="RemoveStream" value="@stream.Website,@stream.Channel" disabled="@DisableAllButtons">
                                        X
                                    </button>

                                    @if(stream.Status == EnumsModel.ScrapperStatus.Running)
                                    {
                                        <button type="button" class="btn btn-danger ms-1" @onclick="StopStream" value="@stream.Website,@stream.Channel" disabled="@DisableAllButtons">
                                            Stop
                                        </button>
                                    }
                                    else
                                    {
                                        <button type="button" class="btn btn-primary ms-1" @onclick="StartStream" value="@stream.Website,@stream.Channel" disabled="@DisableAllButtons">
                                            Start
                                        </button>                                        
                                    }
                                </div>
                            </td>
                        </tr>
                    }
                </tbody>
            </table>
        }

    </div>
</div>


@code {
    private BlockingCollection<Stream> streams = new();

    private string WebsiteAdd {get;set;} = "";
    private string ChannelAdd {get;set;} = "";

    private bool DisableAllButtons {get;set;} = false;

    private bool debug = false;

    protected override void OnInitialized()
    {
        //Debug
        if(debug)
        {
            IServiceScopeFactory mockScope = new Mock<IServiceScopeFactory>().Object;
            Stream mockStream = new Stream("Test", "Testing", new EnvironmentModel(), mockScope, 10);
            streams.Add(mockStream);            
            streams.Add(mockStream);            
            streams.Add(mockStream);            
        }
        else
        {
            Task.Run(UpdateOnSeconds, WatcherService.CancellationToken);            
        }
    }

    protected async Task UpdateOnSeconds()
    {
        while (true)
        {
            List<Stream> localList = WatcherService.ListStreams;
            streams = new BlockingCollection<Stream>(new ConcurrentQueue<Stream>(localList));;
            await InvokeAsync(() => { StateHasChanged(); });
            await Task.Delay(1000);            
        }
    }

    private void AddStream()
    {
        string website = WebsiteAdd;
        string channel = ChannelAdd;
        Console.WriteLine($"Adding - Website: {website}, Channel: {channel}");
        if(string.IsNullOrEmpty(website))
        {
            Console.WriteLine($"Adding - Website was empty");
            return;
        }
        else if(string.IsNullOrEmpty(channel))
        {
            Console.WriteLine($"Adding - Channel was empty");
            return;
        }
        else
        {
            DisableAllButtons = true;
            if(!WatcherService.AddStream(website, channel))
            {
                Console.WriteLine($"Adding - Error adding Website: {website}, Channel: {channel}");
            }
            DisableAllButtons = false;
        }
    }
    private void StartAllStreams()
    {
        Console.WriteLine($"Starting All Streams");
        //if (WatcherService.AddStream())
        //{
            
        //}
    }
    private void StopAllStreams()
    {
        Console.WriteLine($"Stopping All Streams");
        //if (WatcherService.AddStream())
        //{
            
        //}
    }
    private void StartStream()
    {
        //if (WatcherService.AddStream())
        //{
            
        //}
    }
    private void StopStream()
    {
        //if (WatcherService.AddStream())
        //{
            
        //}
    }private void RemoveStream()
    {
        //if (WatcherService.AddStream())
        //{
            
        //}
    }
}
