@page "/"

<PageTitle>Index</PageTitle>

@using Scrapper.Services
@using Scrapper.Models
@using System.Collections.Concurrent
@using System.Timers
@using System.Text.RegularExpressions
@inject IWatcherService WatcherService

<h1>Livestreams</h1>

@if (streams == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <table class="table">
        <thead>
            <tr>
                <th></th>
                <th>Website</th>
                <th>Channel</th>
                <th>Status</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var stream in streams)
            {
                <tr>
                    <td><input type="checkbox" name="brand"></td>
                    <td>@Regex.Replace(stream.Website, "^[a-z]", m => m.Value.ToUpper())</td>
                    <td>@stream.Channel</td>
                    @if (stream.Status == EnumsModel.ScrapperStatus.Waiting)
                    {
                        <td>@stream.Status (@TimeSpan.FromMilliseconds(stream.WaitTimer.TimeLeft).ToString(@"hh\:mm\:ss"))</td>
                    }
                    else
                    {
                        <td>@stream.Status</td>
                    }
                </tr>
            }
        </tbody>
    </table>
}

@code {
    private BlockingCollection<Stream> streams = new();

    protected override void OnInitialized()
    {
        Task.Run(UpdateOnSeconds, WatcherService.CancellationToken);
    }

    protected async Task UpdateOnSeconds()
    {
        while (true)
        {
            List<Stream> localList = WatcherService.ListStreams;
            streams = new BlockingCollection<Stream>(new ConcurrentQueue<Stream>(localList));;
            await InvokeAsync(() => { StateHasChanged(); });
            await Task.Delay(1000);            
        }
    }
}
