@page "/"

<PageTitle>Index</PageTitle>

@using ScrapperLibrary.Services
@using ScrapperLibrary.Models
@using System.Collections.Concurrent
@using System.Timers
@using System.Text.RegularExpressions
@using Microsoft.Extensions.DependencyInjection
@using Microsoft.Extensions.Logging
@using Moq
@inject IWatcherService WatcherService
@inject ILogger<HostService> _logger


<div class="container">
    <div class="row align-items-start mt-4 mb-4" style="height:60px">        
        <div class="col-md-6">
            <div class="input-group">
                <input type="text" style="min-width: 120px;" class="form-control" placeholder="Stream" @bind=ChannelAdd>
                <select class="form-control" style="min-width: 120px;" @bind="WebsiteAdd">
                    <option selected value="">Choose...</option>
                    @foreach (var name in Enum.GetNames(typeof(StreamEnvironment.Websites)))
                    {
                        <option value="@name.ToLower()">@name</option>
                    }
                </select>
                <button type="button" class="btn btn-primary" style="z-index:0" @onclick="AddStream" disabled="@DisableAllButtons">
                    Add
                </button>
            </div>
        </div>
        <div class="col-md-6 ms-auto">
            <button type="button" class="btn btn-primary float-end ms-3" @onclick="StartAllStreams" disabled="@DisableAllButtons">
                Start All
            </button>
            <button type="button" class="btn btn-danger float-end ms-3" @onclick="StopAllStreams" disabled="@DisableAllButtons">
                Stop All
            </button>
        </div>
    </div>
    <div class="row align-items-start">
        @if (streams == null)
        {
            <p><em>Loading...</em></p>
        }
        else
        {
            <table class="table table-striped table-hover table-sm align-middle">
                <thead>
                    <tr>
                        <th class="text-center">Website</th>
                        <th class="text-center">Channel</th>
                        <th class="text-center">Status</th>
                        <th class="text-center">Current Game</th>
                        <th class="text-center">Viewers</th>
                        <th class="text-center"></th>
                    </tr>
                </thead>
                <tbody>
                    @foreach (var stream in streams)
                    {
                        <tr>
                            <td class="pt-2 pb-1 text-center border-end">@(char.ToUpper(stream.Website[0]) + stream.Website.Substring(1))</td>
                            <td class="pt-2 pb-1 text-center border-end">@(char.ToUpper(stream.Channel[0]) + stream.Channel.Substring(1))</td>
                            @if (stream.Status == Enums.ScrapperStatus.Waiting)
                            {
                                if (stream.WaitTimer.TimeLeft <= 0 || stream.WaitTimer.ElapsedOnce)
                                {
                                    <td class="pt-2 pb-1 text-center border-end">Starting...</td>
                                    <td class="pt-2 pb-1 text-center border-end"><strong>...</strong></td>
                                    <td class="pt-2 pb-1 text-center border-end"><strong>...</strong></td>
                                }
                                else
                                {
                                    <td class="pt-2 pb-1 text-center border-end">@stream.Status (@TimeSpan.FromMilliseconds(stream.WaitTimer.TimeLeft).ToString(@"mm\:ss"))</td>
                                    <td class="pt-2 pb-1 text-center text-black-50  border-end">Not Streaming</td>
                                    <td class="pt-2 pb-1 text-center text-black-50 border-end">Not Streaming</td>
                                }
                            }
                            else if(stream.Status == Enums.ScrapperStatus.Running)
                            {
                                @if (string.IsNullOrEmpty(stream.Scrapper.CurrentGame) && stream.Scrapper.ViewersCount == 0)
                                {
                                    <td class="pt-2 pb-1 text-center border-end"><strong>Loading...</strong></td>
                                    <td class="pt-2 pb-1 text-center border-end"><strong>...</strong></td>                                    
                                    <td class="pt-2 pb-1 border-end"><span class="text-end d-flex justify-content-center"><strong>...</strong></span></td>
                                }
                                else
                                {
                                    <td class="pt-2 pb-1 text-center border-end"><strong>@stream.Status</strong></td>
                                    <td class="pt-2 pb-1 text-center border-end">@stream.Scrapper.CurrentGame</td>
                                    <td class="pt-2 pb-1 border-end"><span class="text-end d-flex justify-content-center">@String.Format("{0:n0}", stream.Scrapper.ViewersCount)</span></td>
                                }
                            }
                            else
                            {
                                <td class="pt-2 pb-1 text-center border-end">@stream.Status</td>
                                <td class="pt-2 pb-1 text-center text-black-50 border-end">Offline</td>
                                <td class="pt-2 pb-1 text-center text-black-50 border-end">Offline</td>
                            }
                            <td class="pt-2 pb-1 ">
                                <div class="d-flex flex-row-reverse">
                                    <button type="button" class="btn btn-secondary ms-3" @onclick="() => RemoveStream(stream.Website,stream.Channel)" disabled="@DisableAllButtons">
                                        X
                                    </button>

                                    @if(stream.Status == Enums.ScrapperStatus.Running || (stream.Status == Enums.ScrapperStatus.Waiting))
                                    {
                                        <button type="button" class="btn btn-danger ms-1" @onclick="() => StopStream(stream.Website, stream.Channel)" disabled="@DisableAllButtons">
                                            Stop
                                        </button>
                                    }
                                    else
                                    {
                                        <button type="button" class="btn btn-primary ms-1" @onclick="() => StartStream(stream.Website,stream.Channel)" disabled="@DisableAllButtons">
                                            Start
                                        </button>                                        
                                    }
                                </div>
                            </td>
                        </tr>
                    }
                </tbody>
            </table>
        }

    </div>
</div>


@code {
    private BlockingCollection<StreamObject> streams = new();

    private string WebsiteAdd {get;set;} = "";
    private string ChannelAdd {get;set;} = "";

    private bool DisableAllButtons {get;set;} = false;

    private bool debug = false;

    protected override void OnInitialized()
    {
        //Debug
        if(debug)
        {
            IServiceScopeFactory mockScope = new Mock<IServiceScopeFactory>().Object;
            StreamObject mockStream = new StreamObject("Test", "Testing", new StreamEnvironment(), mockScope, 10);
            streams.Add(mockStream);            
            streams.Add(mockStream);            
            streams.Add(mockStream);            
        }
        else
        {
            Task.Run(UpdateOnSeconds, WatcherService.CancellationToken);            
        }
    }

    protected async Task UpdateOnSeconds()
    {
        while (true)
        {
            List<StreamObject> localList = WatcherService.ListStreams;
            streams = new BlockingCollection<StreamObject>(new ConcurrentQueue<StreamObject>(localList));;
            await InvokeAsync(() => { StateHasChanged(); });
            await Task.Delay(1000);            
        }
    }

    private void AddStream()
    {
        string website = WebsiteAdd;
        string channel = ChannelAdd;
        _logger.LogInformation($"Main Window: Add -> Website: {website}, Channel: {channel}");
        if(string.IsNullOrEmpty(website))
        {
            _logger.LogInformation($"Main Window: Add -> Website was empty");
            return;
        }
        else if(string.IsNullOrEmpty(channel))
        {
            _logger.LogInformation($"Main Window: Add -> Channel was empty");
            return;
        }
        else
        {
            DisableAllButtons = true;
            if(!WatcherService.AddStream(website, channel))
            {
                _logger.LogInformation($"Main Window: Add -> Error adding Website: {website}, Channel: {channel}");
            }
            DisableAllButtons = false;
        }
    }
    private async void StartAllStreams()
    {
        DisableAllButtons = true;
        _logger.LogInformation($"Main Window: Starting All Streams");
        WatcherService.StartAllStreamScrapper();
        await Task.Delay(1000);
        DisableAllButtons = false;
    }
    private async void StopAllStreams()
    {
        DisableAllButtons = true;
        _logger.LogInformation($"Main Window: Stopping All Streams");
        WatcherService.StopAllStreamScrapper();
        await Task.Delay(1000);
        DisableAllButtons = false;
    }
    private async void StartStream(string website, string channel)
    {
        DisableAllButtons = true;
        _logger.LogInformation($"Main Window: Start -> Website: {website}, Channel: {channel}");
        WatcherService.StartStream(website, channel);
        await Task.Delay(1000);
        DisableAllButtons = false;
    }
    private async void StopStream(string website, string channel)
    {
        DisableAllButtons = true;
        _logger.LogInformation($"Main Window: Stop -> Website: {website}, Channel: {channel}");
        WatcherService.StopStream(website, channel);
        await Task.Delay(1000);
        DisableAllButtons = false;
    }
    private async void RemoveStream(string website, string channel)
    {
        DisableAllButtons = true;
        _logger.LogInformation($"Main Window: Remove -> Website: {website}, Channel: {channel}");
        WatcherService.RemoveStream(website, channel);
        await Task.Delay(1000);
        DisableAllButtons = false;
    }
}
